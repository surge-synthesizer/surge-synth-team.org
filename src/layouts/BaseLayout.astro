---
import { ClientRouter } from "astro:transitions";
import "../styles/index.css";

interface Props {
    title: string;
}

const { title } = Astro.props;

const navLinks = [
    ["Projects", "/"],
    ["GitHub", "https://github.com/surge-synthesizer"],
    ["Open Source", "/open-source"],
    ["Contact", "/contact"],
] as const;
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="author" content="Surge Synth Team" />
        <meta
            name="description"
            content="We maintain and contribute to awesome open source audio plugins!"
        />
        <meta property="og:url" content={Astro.url.href} />
        <meta property="og:title" content={title} />
        <meta
            property="og:description"
            content="We maintain and contribute to awesome open source audio plugins!"
        />
        <meta property="og:image" content="https://surge-synth-team.org/images/og_image.png" />
        <meta
            property="og:image:secure_url"
            content="https://surge-synth-team.org/images/og_image.png"
        />
        <meta property="og:image:type" content="image/png" />
        <meta property="og:image:width" content="1200" />
        <meta property="og:image:height" content="600" />
        <meta property="ig:image:alt" content="Surge Synth Team" />
        <meta property="og:type" content="website" />
        <link rel="icon" href="/favicon.ico" />
        <link
            rel="preload"
            href="/fonts/InterVariable.woff2"
            as="font"
            type="font/woff2"
            crossorigin
        />
        <link
            rel="preload"
            href="/fonts/InterVariable-Italic.woff2"
            as="font"
            type="font/woff2"
            crossorigin
        />
        <title>{title}</title>
        <script is:inline>
            function setTheme() {
                !localStorage.getItem("theme") && localStorage.setItem("theme", "auto");

                switch (localStorage.getItem("theme")) {
                    case "auto":
                        window.matchMedia("(prefers-color-scheme: dark)").matches
                            ? document.documentElement.setAttribute("data-theme", "dark")
                            : document.documentElement.setAttribute("data-theme", "light");
                        break;

                    case "dark":
                        document.documentElement.setAttribute("data-theme", "dark");
                        break;

                    case "light":
                        document.documentElement.setAttribute("data-theme", "light");
                        break;
                }
            }

            function setThemeSelection() {
                document.getElementById("theme-select").value = localStorage.getItem("theme");
            }

            setTheme();

            document.addEventListener("readystatechange", (event) => {
                if (event.target.readyState === "interactive") {
                    setThemeSelection();
                }
            });

            document.addEventListener("astro:after-swap", () => {
                setTheme();
                setThemeSelection();
            });
        </script>
        <ClientRouter />
    </head>

    <body class="bg-neutral-200 dark:bg-neutral-800">
        <nav id="nav" class="sticky top-0 bg-neutral-100 p-2 shadow-md dark:bg-neutral-700">
            <menu class="flex flex-wrap items-center justify-center gap-6"
                >{
                    navLinks.map(([title, href]) => (
                        <li>
                            <a href={href}>{title}</a>
                        </li>
                    ))
                }
                <li>
                    <select
                        aria-label="Theme"
                        name="themes"
                        id="theme-select"
                        class="rounded-md bg-neutral-200 text-neutral-800 dark:bg-neutral-800 dark:text-neutral-200">
                        <option value="auto">System</option>
                        <option value="dark">Dark</option>
                        <option value="light">Light</option>
                    </select>
                </li>
            </menu>
        </nav>

        <div class="w-fit place-self-center p-6">
            <slot />
        </div>
    </body>
</html>

<script>
    function navHeight() {
        const updateNavHeight = () => {
            const nav = document.getElementById("nav") as HTMLElement;
            document.documentElement.style.setProperty("--nav-height", `${nav.offsetHeight}px`);
        };

        updateNavHeight();

        window.addEventListener("resize", () => {
            updateNavHeight();
        });
    }

    function themeObserver() {
        const themeSelect = document.getElementById("theme-select") as HTMLSelectElement;

        themeSelect.addEventListener("change", () => {
            localStorage.setItem("theme", themeSelect.value);

            switch (themeSelect.value) {
                case "auto":
                    window.matchMedia("(prefers-color-scheme: dark)").matches
                        ? document.documentElement.setAttribute("data-theme", "dark")
                        : document.documentElement.setAttribute("data-theme", "light");
                    break;

                case "dark":
                    document.documentElement.setAttribute("data-theme", "dark");
                    break;

                case "light":
                    document.documentElement.setAttribute("data-theme", "light");
                    break;
            }
        });
    }

    function setup() {
        navHeight();
        themeObserver();
    }

    document.addEventListener("astro:after-swap", setup);
    setup();
</script>
