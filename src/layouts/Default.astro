---
const { title } = Astro.props;
import "css/index.css";
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta property="og:url" content={Astro.url.href} />
        <meta property="og:title" content={title} />
        <meta property="og:description" content="Surge Synth Team" />
        <meta property="og:image" content="https://surge-synth-team.org/images/og_image.png" />
        <meta
            property="og:image:secure_url"
            content="https://surge-synth-team.org/images/og_image.png"
        />
        <meta property="og:image:type" content="image/png" />
        <meta property="og:image:width" content="1200" />
        <meta property="og:image:height" content="600" />
        <meta property="ig:image:alt" content="Surge Synth Team" />
        <meta property="og:type" content="website" />
        <meta name="color-scheme" content="light dark" />
        <meta
            name="description"
            content="We maintain and contribute to awesome open source audio plugins!"
        />
        <link rel="icon" href="/favicon.ico" />
        <link
            rel="preload"
            href="/fonts/Lato-Regular.woff"
            as="font"
            type="font/woff"
            crossorigin
        />
        <link rel="preload" href="/fonts/Lato-Italic.woff" as="font" type="font/woff" crossorigin />
        <title>{title}</title>
    </head>

    <body class="bg-neutral-100 text-neutral-700 dark:bg-neutral-900 dark:text-neutral-300">
        <nav
            class="sticky top-0 flex flex-row flex-wrap place-content-center gap-2 bg-neutral-200/90 p-2 font-semibold leading-none backdrop-blur-md dark:bg-neutral-800/90">
            {
                [
                    ["Projects", "/"],
                    ["GitHub", "https://github.com/surge-synthesizer"],
                    ["Open Source", "/open-source"],
                    ["Contact", "/contact"],
                ].map(([title, href]) => (
                    <a
                        href={href}
                        class="text-nowrap rounded-lg bg-neutral-50 p-2 text-lg leading-none no-underline dark:bg-neutral-950">
                        {title}
                    </a>
                ))
            }
            <span
                id="theme-toggle"
                class="select-none rounded-lg bg-neutral-50 p-2 text-lg leading-none no-underline hover:cursor-pointer dark:bg-neutral-950"
                >ðŸ”…&#xFE0E;</span
            >
        </nav>
        <main class="m-auto max-w-[100ch] p-8">
            <slot />
        </main>
    </body>
</html>

<script>
    const setTheme = (element: HTMLElement, dark: boolean) => {
        dark
            ? document.documentElement.classList.add("dark")
            : document.documentElement.classList.remove("dark");
        element.innerHTML = dark ? "ðŸ”…&#xFE0E;" : "ðŸ”†&#xFE0E;";
    };

    const saveTheme = (element: HTMLElement, dark: boolean) => {
        setTheme(element, dark);
        localStorage.setItem("theme", dark ? "dark" : "light");
    };

    const toggle = document.getElementById("theme-toggle") as HTMLSpanElement;
    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");

    if (localStorage.getItem("theme")) {
        setTheme(toggle, localStorage.getItem("theme") === "dark" ? true : false);
    } else {
        saveTheme(toggle, mediaQuery.matches);
    }

    toggle.addEventListener("click", () => {
        saveTheme(toggle, localStorage.getItem("theme") === "light");
    });
    mediaQuery.addEventListener("change", () => {
        saveTheme(toggle, mediaQuery.matches);
    });
</script>
